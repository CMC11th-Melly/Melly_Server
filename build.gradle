plugins {
    id 'java-library'
    id 'org.springframework.boot' apply(false)
    id 'io.spring.dependency-management'
}

allprojects {
    group = "${projectGroup}"
    version = "${applicationVersion}"
    sourceCompatibility = project.javaVersion

    repositories {
        mavenCentral()
    }
}


subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'jacoco-report-aggregation'


    bootJar.enabled = false // core-api 모듈 이외에는 모두 boot 되지 않는 모듈
    jar.enabled = true

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.3"
        }
    }
    jacoco {
        toolVersion = '0.8.8'
    }

    jacocoTestReport {

        // jacoco report 형식 및 경로 설정
        reports {
            html.required = true
            csv.required = false
            xml.required = true
        }

        def Qdomains = []

        for (qPattern in '**/QA'..'**/QZ') {
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [] + Qdomains)
                    })
            )
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {

        def Qdomains = []

        for (qPattern in '*.QA'..'*.QZ') {
            Qdomains.add(qPattern + '*')
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'
                // includes = []

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.0
                }

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.0
                }

                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 200
                }

                excludes = [] + Qdomains
            }

        }

    }

    dependencies {

        // lombok
        implementation 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'

        // test
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'
        testImplementation "com.h2database:h2"
    }

    test {
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }
}

// Sub-Module 적용
task copyPrivate(type: Copy) {
    copy {
        from './lib'
        include "*.yml", "*.json"
        into 'core/core-api/src/main/resources'
    }
}


