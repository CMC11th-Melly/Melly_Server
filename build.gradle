plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2" apply false
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" apply false // apply false는 root에서 동작하지 않게 만든다

}

bootJar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// Sub-Module 적용
task copyPrivate(type: Copy) {
    copy {
        from './lib'
        include "*.yml", "*.json"
        into 'melly-api/src/main/resources'
    }
}


subprojects {

    group 'cmc.mellyserver'
    version '1.0'
    sourceCompatibility = 11

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'


    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {

        // Spring
        implementation 'org.springframework.boot:spring-boot-starter-web'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.2.1.RELEASE'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // Tolerance
        implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:2.1.7'
        implementation 'org.springframework.retry:spring-retry'

        // firebase
        implementation 'com.google.firebase:firebase-admin:9.1.1'

        // Monitoring
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // Redis
        implementation 'org.redisson:redisson-spring-boot-starter:3.23.1'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'

        // Test
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.2'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'
        testImplementation "com.h2database:h2"
    }

    // ======= jacoco config =========
    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {

        reports {
            // 원하는 리포트를 켜고 끌 수 있습니다.
            html.enabled true
            xml.enabled false
            csv.enabled false
        }


        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/MellyServerApplication*',
                                '**/*Request*',
                                '**/*Response*',
                                '**/*Dto*',
                                '**/*Client*',
                                '**/common*',
                                '**/*Exception*',
                                '**/*Config*',
                                '**/*Health*',
                                '**/*OAuth*',
                                '**/*Client*',
                                '**/*Apple*',
                                '**/*Key*'
                        ] + Qdomains)
            }
            ))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        def Qdomains = []
        // 패키지 + 클래스명
        for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }
        // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
        violationRules {
            rule {
                element = 'BUNDLE'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }

                excludes = [
                        '**.*Application*',
                        '**.*Request*',
                        '**.*Response*',
                        '**.*Dto*',
                        '**.*Client*',
                        '**.*Interceptor*',
                        '**.*Exception*',
                        '**.*Config*',
                        '**/*Health*',
                        '**/*OAuth*',
                        '**/*Client*',
                        '**/*Apple*',
                        '**/*Key*'
                ] + Qdomains
            }
        }
    }
}