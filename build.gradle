plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'jacoco-report-aggregation'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" apply false // 원하는 모듈에서만 선택해서 사용 가능하다.
}


repositories {
    mavenCentral()
}

// 루트 프로젝트는 src를 삭제했기 때문에 main이 존재하지 않는다.
bootJar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


subprojects {

    group 'cmc.mellyserver'
    version '1.0'
    sourceCompatibility = 11

    apply plugin: 'java'
    apply plugin: 'java-library' // api() 사용 위한 것
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'jacoco-report-aggregation'
    apply plugin: 'org.asciidoctor.jvm.convert'


    repositories {
        mavenCentral()
    }

    configurations {
        asciidoctorExtensions
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.20'
        annotationProcessor 'org.projectlombok:lombok:1.18.20'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'com.tngtech.archunit:archunit-junit4:1.0.0-rc1'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.0'
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'io.rest-assured:rest-assured:5.3.0'
        testImplementation 'io.rest-assured:xml-path:5.3.0'
        testImplementation 'io.rest-assured:json-schema-validator:5.3.0'
        testImplementation 'io.rest-assured:spring-mock-mvc:5.3.0'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

        // redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    }


    // Rest-Docs 설정 시작
    ext {
        snippetsDir = file('build/generated-snippets')
    }

    test {
        outputs.dir snippetsDir // snippetsDir 부분에 결괏값을 출력한다.
        print('before')
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport' // 마지막에는 jacocoReport를 작성한다.
    }

    asciidoctor { // asciidoctor 작업 구성
        dependsOn test // test 작업 이후에 작동하도록 하는 설정
        print('hello')
        configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
        inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

        // source가 없으면 .adoc파일을 전부 html로 만들어버림
        // source 지정시 특정 adoc만 HTML로 만든다.
        sources {
            include("**/index.adoc", "**/common/*.adoc")
        }
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {

        reports {
            // 원하는 리포트를 켜고 끌 수 있습니다.
            html.enabled true
            xml.enabled false
            csv.enabled false
        }


        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/MellyServerApplication*',
                                '**/*Request*',
                                '**/*Response*',
                                '**/*Dto*',
                                '**/*Client*',
                                '**/common*',
                                '**/*Exception*',
                                '**/*Config*',
                                '**/*Health*',
                                '**/*OAuth*',
                                '**/*Client*',
                                '**/*Apple*',
                                '**/*Key*'
                        ] + Qdomains)
            }
            ))
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        def Qdomains = []
        // 패키지 + 클래스명
        for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
            Qdomains.add(qPattern + '*')
        }
        // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
        violationRules {
            rule {
                element = 'BUNDLE'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }

                excludes = [
                        '**.*Application*',
                        '**.*Request*',
                        '**.*Response*',
                        '**.*Dto*',
                        '**.*Client*',
                        '**.*Interceptor*',
                        '**.*Exception*',
                        '**.*Config*',
                        '**/*Health*',
                        '**/*OAuth*',
                        '**/*Client*',
                        '**/*Apple*',
                        '**/*Key*'
                ] + Qdomains
            }
        }
    }


}



