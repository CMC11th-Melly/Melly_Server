plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

bootJar.enabled = true
jar.enabled = false

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}


dependencies {

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springframework.restdocs:spring-restdocs-restassured'
    implementation 'io.rest-assured:spring-mock-mvc'

    // JWT
    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'

    // Circuit Breaker
    implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.0.2"
    implementation "io.github.resilience4j:resilience4j-all"

    // Test
    testImplementation 'org.springframework.security:spring-security-test'

    // Rest Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // Multi Module
    implementation project(":storage:db-core")
    implementation project(":storage:db-redis")
    implementation project(":infra:notification")
    implementation project(":infra:file")
    implementation project(":infra:mail")
    implementation project(":clients:client-auth")
    implementation project(":support:logging")
    implementation project(":support:monitoring")
    jacocoAggregation project(":storage:db-core")
    jacocoAggregation project(":infra:notification")
    jacocoAggregation project(":infra:file")
    jacocoAggregation project(":infra:mail")
    jacocoAggregation project(":support:logging")
    jacocoAggregation project(":clients:client-auth")

    testImplementation(testFixtures(project(":storage:db-core")))


}


// ===== Rest Docs Config =====

ext {
    snippetsDir = file('build/generated-snippets') // 해당 경로에 adoc 조각들을 모읍니다.
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // test의 결과물을 snippetsDir로 모읍니다.
}

asciidoctor { // asciidoctor 작업 구성입니다.
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    dependsOn testCodeCoverageReport
}

// refresh를 위해 static/docs 폴더를 비웁니다.
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") // build/docs/asciidoc 경로에 만들어지는 결과물을 static/docs로 복사합니다.
    into 'src/main/resources/static/docs'
}

build {
    dependsOn copyDocument
}

