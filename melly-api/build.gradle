plugins {
    id 'org.asciidoctor.jvm.convert'
}

bootJar {
    enabled = true
}

configurations {
    asciidoctorExtensions
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.2.1.RELEASE'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // OpenFeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Test
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // Multi-Module
    implementation project(':melly-core')
    implementation project(':melly-common')
    testImplementation(testFixtures(project(":melly-core")))
}

ext {
    set('springCloudVersion', "2021.0.5")
}

dependencyManagement {

    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// Rest-Docs 설정 시작
ext {
    snippetsDir = file('build/generated-snippets') // 스니펫들이 생성되는 위치 지정
}

test {
    outputs.dir snippetsDir // 위에서 지정한 snippetsDir에 결과를 출력하도록 한다.
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // 마지막에는 jacocoReport를 작성한다.
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippectsDir에서 스니펫들을 불러온다.

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }
}
